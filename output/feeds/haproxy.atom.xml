<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Trajectoires d'un admin</title><link href="http://cyrilb.me/" rel="alternate"></link><link href="http://cyrilb.me/feeds/haproxy.atom.xml" rel="self"></link><id>http://cyrilb.me/</id><updated>2014-05-09T09:19:00+02:00</updated><entry><title>Haproxy et les logs</title><link href="http://cyrilb.me/haproxy-et-les-logs.html" rel="alternate"></link><updated>2014-05-09T09:19:00+02:00</updated><author><name>cyrilb</name></author><id>tag:cyrilb.me,2014-05-09:haproxy-et-les-logs.html</id><summary type="html">&lt;p&gt;Utiliser HaProxy sans activer les logs  et savoir les lire, c'est comme
être une fille et ne pas avoir de shampooing. Voici quelques clefs pour
y voir un peu plus clair. Ce billet ne parlera que des logs HTTP, mais
c'est plus ou moins la même chose pour TCP.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Activer les logs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ca se fait en deux secondes.&lt;/p&gt;
&lt;p&gt;Dans la section 'global' on ajoute :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;log /dev/log local0 info
log /dev/log local0 notice
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Je pourrai bien sûr les renvoyer directement sur un serveur de logs genre :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;log 10.17.9.5 notice
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Dans la section 'default' on ajoute (optionnel) :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;option log-health-checks
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On se rend ensuite dans /etc/rsyslog.d (pour les utilisateurs de Ubuntu)
et on crée le fichier haproxy.conf :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$programname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;haproxy&amp;#39;&lt;/span&gt; and &lt;span class="nv"&gt;$syslogseverity&lt;/span&gt;-text &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;info&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; -/var/log/haproxy/haproxy-info.log
&amp;amp; ~
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$programname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;haproxy&amp;#39;&lt;/span&gt; and &lt;span class="nv"&gt;$syslogseverity&lt;/span&gt;-text &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;notice&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; -/var/log/haproxy/haproxy-notice.log
&amp;amp; ~
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Comme on veut faire les choses bien, on va configurer la rotation des
logs générés par haproxy avec logrotate. Il suffit de se rendre dans
/etc/logrotate.d/ et de créer le fichier haproxy :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/var/log/haproxy/haproxy-*.log &lt;span class="o"&gt;{&lt;/span&gt;
    missingok
    notifempty
    sharedscripts
    rotate 14
    daily
    compress
    postrotate
    reload rsyslog &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nb"&gt;    &lt;/span&gt;endscript
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Une fois tout cela effectué, relancez haproxy/syslog/votre chien pour
que toutes les modifications soient prises en compte.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Comment lire les logs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Voici à quoi ressemble une ligne de logs dans haproxy :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;lb1 haproxy&lt;span class="o"&gt;[&lt;/span&gt;7112&lt;span class="o"&gt;]&lt;/span&gt;: 157.56.92.164:41073 &lt;span class="o"&gt;[&lt;/span&gt;09/May/2014:09:06:59.112&lt;span class="o"&gt;]&lt;/span&gt; main webback/web3 0/0/0/298/298 200 9041 - - --NI 11/11/0/0/0 0/0 &lt;span class="s2"&gt;&amp;quot;GET /fr/heros/menage/bulligny-54113/121324 HTTP/1.1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;C'est vraiment bluffant de constater à quel niveau de détail on peut
descendre dans cette ligne de logs. Voici à quoi chaque segment
correspond.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;lb1&lt;/strong&gt; : Le hostname du serveur qui a écrit le log.&lt;br /&gt;
&lt;strong&gt;haproxy[7112]&lt;/strong&gt; : Le nom du process/PID qui a écrit le log.&lt;br /&gt;
&lt;strong&gt;157.56.92.164:41073&lt;/strong&gt; : L'adresse IP du client + PORT&lt;br /&gt;
&lt;strong&gt;[09/May/2014:09:06:59.112]&lt;/strong&gt; : L'accept date du log&lt;br /&gt;
&lt;strong&gt;main&lt;/strong&gt; : Nom du frontend&lt;br /&gt;
&lt;strong&gt;webback/web3&lt;/strong&gt; : Backend/serveur qui a servi la requête&lt;br /&gt;
&lt;strong&gt;0/0/0/298/298&lt;/strong&gt; : Ca se corse avec ces 5 champs, nous pouvons les
segmenter comme suit&lt;br /&gt;
&lt;strong&gt;Tq&lt;/strong&gt; : Le temps passé en ms de la requête http du client&lt;br /&gt;
&lt;strong&gt;Tw&lt;/strong&gt; : Le temps passé en ms d'attente des queues si il y en a&lt;br /&gt;
&lt;strong&gt;Tc&lt;/strong&gt; : Le temps passé en ms d'attente de connexion au serveur&lt;br /&gt;
&lt;strong&gt;Tr&lt;/strong&gt; : Le temps en ms d'envoi de la réponse du serveur vers le
client&lt;br /&gt;
&lt;strong&gt;Tt&lt;/strong&gt; : Le temps total de parcours entre l'ouverture de connexion et
la fermeture de la connexion&lt;br /&gt;
&lt;strong&gt;200&lt;/strong&gt; : Code retour http&lt;br /&gt;
&lt;strong&gt;9041&lt;/strong&gt; : Nombre total de bits transmis au client&lt;br /&gt;
&lt;strong&gt;-&lt;/strong&gt; : captured_request_cookie&lt;br /&gt;
&lt;strong&gt;-&lt;/strong&gt; : captured_response_cookie&lt;br /&gt;
&lt;strong&gt;--NI&lt;/strong&gt; : Comment la session s'est terminée, "termination_state", j'y
reviendrai un autre jour, là j'ai piscine.&lt;br /&gt;
&lt;strong&gt;11/11/0/0/0&lt;/strong&gt; : On peut segmenter ce tronçon comme suit&lt;br /&gt;
&lt;strong&gt;actonn&lt;/strong&gt; : Le nombre total de connexions lorsque la session a été
loggée&lt;br /&gt;
&lt;strong&gt;feconn&lt;/strong&gt; : Le nombre total de connexions sur le frontend&lt;br /&gt;
&lt;strong&gt;beconn&lt;/strong&gt; : Le nombre total de connexions sur le backend&lt;br /&gt;
&lt;strong&gt;srv_conn&lt;/strong&gt; : Le nombre de connexions actives sur le serveur&lt;br /&gt;
&lt;strong&gt;retries&lt;/strong&gt; : Le nombre de connexions qu'il a fallu pour se connecter
au serveur&lt;br /&gt;
&lt;strong&gt;0/0&lt;/strong&gt; Découpage comme suit&lt;br /&gt;
&lt;strong&gt;srv_queue&lt;/strong&gt; : Nombre de requêtes qu'il a fallu passer avant de se
connecter au serveur.&lt;br /&gt;
&lt;strong&gt;backend_queue&lt;/strong&gt; : Nombre de requêtes qu'il a fallu passer avant de
se connecter au backend.&lt;br /&gt;
&lt;strong&gt;"GET /fr/heros/menage/bulligny-54113/121324 HTTP/1.1"&lt;/strong&gt; : Notre
requête HTTP.&lt;/p&gt;
&lt;p&gt;Hey, le format des logs ne vous convient pas ? Pas de problèmes, vous
pouvez en changer aisément. Mettons que par exemple vous ne désiriez
logger que l'adresse IP du client et la requête HTTP, la directive
log-format permet de le faire :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;log-format %ci %r
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Toutes ces variables sont bien sûres accessibles dans la documentation
de haproxy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Analyser les logs de haproxy grâce à halog&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;C'est là que ça devient intéressant grâce à halog. Pour l'instant il
faut l'installer en se rendant dans les sources de
haproxy/contrib/halog.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;root@corniaud:/usr/local/src/haproxy-1.5-dev22/contrib/halog# make
gcc -O3  -o halog -I../../include -I../../ebtree ../../ebtree/ebtree.c ../../ebtree/eb32tree.c ../../ebtree/eb64tree.c ../../ebtree/ebmbtree.c ../../ebtree/ebsttree.c ../../ebtree/ebistree.c ../../ebtree/ebimtree.c halog.c fgets2.c
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Une fois halog installé (vous pouvez en faire un lien symbolique vers
/usr/bin) voici quelques exemples de ce que halog permet de faire :&lt;/p&gt;
&lt;p&gt;Voir les derniers messages d'erreur tirés des logs de haproxy :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cat /var/log/haproxy/haproxy-info.log | halog -e
May  6 11:25:04 lb2 haproxy&lt;span class="o"&gt;[&lt;/span&gt;7112&lt;span class="o"&gt;]&lt;/span&gt;: 82.236.50.216:53111 &lt;span class="o"&gt;[&lt;/span&gt;06/May/2014:11:25:03.191&lt;span class="o"&gt;]&lt;/span&gt; main~ webback/web2 64/0/0/-1/1373 -1 0 - - CHVN 31/31/0/0/0 0/0 &lt;span class="s2"&gt;&amp;quot;POST /up/account/pic/upload HTTP/1.1&amp;quot;&lt;/span&gt;
May  6 11:29:19 lb2 haproxy&lt;span class="o"&gt;[&lt;/span&gt;7112&lt;span class="o"&gt;]&lt;/span&gt;: 80.12.100.198:7300 &lt;span class="o"&gt;[&lt;/span&gt;06/May/2014:11:29:18.555&lt;span class="o"&gt;]&lt;/span&gt; main~ webback/web3 1399/0/-1/-1/1399 503 212 - - CCVN 38/38/0/0/0 0/0 &lt;span class="s2"&gt;&amp;quot;GET /f/pics/user_3263079/big_9cid38215a7f2177ed95106e78754d69b088d06b1.jpeg HTTP/1.1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En tirer carrément des stats sur le nombre de hits, de temps de réponse,
de codes retours http, etc...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;root@lb2:~# cat /var/log/haproxy/haproxy-info.log | halog -srv -H -q | awk &lt;span class="s1"&gt;&amp;#39;NR==1; NR&amp;gt;1 { print $0 | &amp;quot;sort -k12rn,12&amp;quot;}&amp;#39;&lt;/span&gt; | column -t
&lt;span class="c"&gt;#srv_name               1xx  2xx    3xx   4xx   5xx  other  tot_req  req_ok  pct_ok  avg_ct  avg_rt&lt;/span&gt;
fuel1/monitor02          0    2023   37    0     0    0      2060     2060    100.0   0       131
webback/web3            0    16286  1940  37    12   3      18278    18265   99.9    1       70
webback/web2            0    15574  1992  33    4    3      17606    17602   100.0   1       63
dagobah/lb2              0    447    0     0     0    0      447      447     100.0   0       53
webback/web1            0    17000  1831  36    5    1      18873    18867   100.0   1       47
badcountry/maintenance  0    2      0     12    0    0      14       14      100.0   0       0
main/&amp;lt;NOSRV&amp;gt;            0    0      0     3650  0    0      3650     0       0.0     0       0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On peut vraiment tout faire, je vous laisse découvrir la suite, mais
c'est l'outil idéal pour tracker les erreurs 50x par exemple ou trouver
un mouton noir dans votre cluster de serveurs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Aller (un peu) plus loin avec les logs de haproxy.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Vous vous en êtes rendu compte, même si de base, les logs sont
pleinement exploitables, on peut ajouter d'autres infos, par exemple (à
mettre dans votre frontend par exemple) :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;capture request header Referer               len 64
capture request header User-Agent            len 128
capture request header Host                  len 64
capture request header X-Forwarded-For       len 64
capture request header Accept-Encoding       len 64
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;C'est assez parlant non ? On peut aller encore plus loin (l'exemple
parle de lui même une fois de plus) :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;capture response header X-WebApp-Id     len 5
capture response header X-Req-My-Uid       len 36
rspidel ^&lt;span class="o"&gt;(&lt;/span&gt;X-WebApp-Id|Server|X-Req-My-Uid&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Le prochain billet sera certainement consacré aux "termination_states"
qui sont indispensables.&lt;/p&gt;</summary><category term="haproxy"></category><category term="logs"></category></entry><entry><title>Empêcher un utilisateur d'accéder à vos backends avec haproxy</title><link href="http://cyrilb.me/Block-user.html" rel="alternate"></link><updated>2014-03-14T13:30:00+01:00</updated><author><name>cyrilb</name></author><id>tag:cyrilb.me,2014-03-14:Block-user.html</id><summary type="html">&lt;p&gt;Empêcher un utilisateur d'accéder à votre site internet qui est derrière
&lt;a href="http://haproxy.1wt.eu/" title="Haproxy homepage"&gt;haproxy&lt;/a&gt; est très simple, et
autant le bloquer directement depuis haproxy.&lt;/p&gt;
&lt;p&gt;Une fois encore, la souplesse des acl de haproxy permet de le faire en
30 secondes.&lt;/p&gt;
&lt;p&gt;Exemple pour bannir une adresse ip :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;acl bad_ip src www.xxx.yyy.zzz
tcp-request connection reject &lt;span class="k"&gt;if &lt;/span&gt;bad_ip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On peut bien sûr remplacer l'adresse ip par une liste d'ip stockées dans
un fichier plat :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;acl bad_ip src -f /opt/blacklist.txt
tcp-request connection reject &lt;span class="k"&gt;if &lt;/span&gt;bad_ip
&lt;/pre&gt;&lt;/div&gt;</summary><category term="acl"></category><category term="haproxy"></category></entry></feed>